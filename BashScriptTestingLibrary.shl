#!/bin/bash
# Written by Ryan Fritts - Questions, comments, and criticisms welcome.

PASSED_TESTS=0
FAILED_TESTS=0
TOTAL_TESTS=0

[[ $1 = "-v" ]] && VERBOSE_MODE="true" || VERBOSE_MODE="false"

# Assert Functions

function assertEquals () {
    if [ $(correctNumberOfArgs $# 2) = "true" ]
    then
        Line=$(echo $(caller) | awk '{print $1}')
        TestCaseCallingAssert=${FUNCNAME[1]}
        if [ "${1}" = "${2}" ] || [ "$(numericCompare "$1" "$2")" = "true" ]
            then
            [[ "$VERBOSE_MODE" = "true" ]] && echo "Line $Line: Passed - $TestCaseCallingAssert" 
            incrementPassedTests
        else
            echo "Line $Line: $TestCaseCallingAssert: assertEquals() failed. Expected \"$1\", but got \"$2\"."
            incrementFailedTests
        fi
    else echo "Line $Line: $TestCaseCallingAssert: assertEquals() failed. Expected two arguments."
      incrementFailedTests
    fi
}


function assertNotSame () {
    if [ $(correctNumberOfArgs $# 2) = "true" ]
    then
        Line=$(echo $(caller) | awk '{print $1}')
        TestCaseCallingAssert=${FUNCNAME[1]}
        if [ "${1}" != "${2}" ]
            then
            [[ $VERBOSE_MODE = "true" ]] && echo "Line $Line: Passed - $TestCaseCallingAssert"
            incrementPassedTests
        else
            echo "Line $Line: $TestCaseCallingAssert: assertNotSame() failed. Expected not \"$1\", but got \"$2\"."
            incrementFailedTests
        fi
    else echo "Line $Line: $TestCaseCallingAssert: assertNotSame() failed. Expected two arguments."
      incrementFailedTests
    fi
}

function assertNull () {
        Line=$(echo $(caller) | awk '{print $1}')
        TestCaseCallingAssert=${FUNCNAME[1]}
        if [ "${1}" = "" ]
        then
            [[ $VERBOSE_MODE = "true" ]] && echo "Line $Line: Passed - $TestCaseCallingAssert"
            incrementPassedTests
        else
            echo "Line $Line: $TestCaseCallingAssert: assertNull() failed. Expected empty string, but got \"$1\"."
            incrementFailedTests
        fi
}

function assertTrue () {
    if [ $(correctNumberOfArgs $# 1) = "true" ]
    then
        Line=$(echo $(caller) | awk '{print $1}')
        TestCaseCallingAssert=${FUNCNAME[1]}
        eval [ $1 ]
        testResult=$?
        if [ "$testResult" = "0" ]
            then
            [[ $VERBOSE_MODE = "true" ]] && echo "Line $Line: Passed - $TestCaseCallingAssert"
            incrementPassedTests
        else
            echo "Line $Line: $TestCaseCallingAssert: assertTrue() failed. Boolean Expression [ $1 ] expected to evaluate as true, evaluated as false."
            incrementFailedTests
        fi
    else echo "Line $Line: $TestCaseCallingAssert: assertTrue() failed. Expected one argument."
      incrementFailedTests
    fi
}


function assertFalse () {
    if [ $(correctNumberOfArgs $# 1) = "true" ]
    then
        Line=$(echo $(caller) | awk '{print $1}')
        TestCaseCallingAssert=${FUNCNAME[1]}
        eval [ $1 ]
        testResult=$?
        if [ "$testResult" = "1" ]
            then
            [[ $VERBOSE_MODE = "true" ]] && echo "Line $Line: Passed - $TestCaseCallingAssert"
            incrementPassedTests
        else
            echo "Line $Line: $TestCaseCallingAssert: assertFalse() failed. Boolean Expression [ $1 ] expected to evaluate as false, evaluated as true."
            incrementFailedTests
        fi
    else echo "Line $Line: $TestCaseCallingAssert: assertFalse() failed. Expected one argument."
      incrementFailedTests
    fi
}

function assertNotNull () {
    if [ $(correctNumberOfArgs $# 1) = "true" ]
    then
        Line=$(echo $(caller) | awk '{print $1}')
        TestCaseCallingAssert=${FUNCNAME[1]}
        if [ "${1}" != "" ]
            then
            [[ $VERBOSE_MODE = "true" ]] && echo "Line $Line: $TestCaseCallingAssert: Passed"
            incrementPassedTests
        else
            echo "Line $Line: $TestCaseCallingAssert: assertNotSame() failed. Expected not empty string"
            incrementFailedTests
        fi
    else echo "Line $Line: $TestCaseCallingAssert: assertNotSame() failed. Expected one argument."
      incrementFailedTests
    fi
}

# Helper functions

function runUnitTests () {
    START_TIME=$(date +%s)
    testNames=$(grep "^function" $0 | awk '{print $2}' | cut -f 1 -d "(")
    testNamesArray=($testNames)
    beginUnitTests
    for testCase in "${testNamesArray[@]}"
    do
        :
        $testCase
    done
    endUnitTests
    END_TIME=$(date +%s)
    echo "Execution completed in $(($END_TIME - $START_TIME)) second(s)..."
    echo ""

    if [ "$FAILED_TESTS" -gt "0" ]
    then
        echo "Unit Tests failed.  Exiting Status Code 1"
        exit 1
    fi
}

function beginUnitTests () {
    clear
    echo ""
    echo "$0:"
    echo ""
}

function endUnitTests () {

    if [ $FAILED_TESTS = 0 ] && [ $VERBOSE_MODE = "false" ]
        then
            echo "All unit tests passed."
    fi
    echo ""
    echo ""
    echo "RESULTS: $PASSED_TESTS tests passed.  $FAILED_TESTS tests failed.  $TOTAL_TESTS tests total."
}

function incrementPassedTests () {
    PASSED_TESTS=$(($PASSED_TESTS+1))
    incrementTotalTests
}

function incrementFailedTests () {
    FAILED_TESTS=$(($FAILED_TESTS+1))
    incrementTotalTests
}

function incrementTotalTests () {
    TOTAL_TESTS=$(($TOTAL_TESTS+1))
}

function correctNumberOfArgs () {
    if [ $1 = $2 ]
        then
            echo "true"
    else
        echo "false"
    fi
}

function numericCompare () {
    awk -v n1=$1 -v n2=$2 \ 'BEGIN { print (n1 == n2) ? "true" : "false" }' 2>/dev/null
}